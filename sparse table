struct sptable {
	static const int maxn = 2e5+5;
	static const int K = log2(maxn) + 1;
	static const int I = 0;
	int tmin[maxn][K];// I based indexing
	int lg[maxn + 1], is_calc = 0;
	void init(vector<int> &A) {
		int n = A.size();
		if (!is_calc) {
			is_calc = 1;
			lg[1] = 0;
			for (int i = 2; i <= maxn; ++i) lg[i] = lg[i / 2] + 1;
		}
		for (int i = I; i < n + I; ++i) tmin[i][0] = A[i];
		for (int j = 1; j <= K; ++j) {
			for (int i = I; i + (1 << j) <= n + I; ++i) {
				tmin[i][j] = max(tmin[i][j - 1], tmin[i + (1 << (j - 1))][j - 1]);
			}
		}
	}
	inline int rmin(int L, int R) {
		int j = lg[R - L + 1];
		return max(tmin[L][j], tmin[R - (1 << j) + 1][j]);
	}
} sp;
